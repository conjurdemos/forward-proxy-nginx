worker_processes  1;

error_log logs/error.log;
error_log logs/verbose.log debug;

pid        logs/nginx.pid;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  logs/access.log  main;


    # Need a shared memory dictionary to store cached tokens.  256k
    # is probably overkill, but it's easier than figuring out exactly
    # how much space we need.
    lua_shared_dict conjur 256k;

    # So we can require the netrc library
    lua_package_path '/home/vagrant/?.lua';

    # Initialize to read the host credentials from a file
    init_by_lua_file '/home/vagrant/init.lua';

    server {
      listen 8080;

      # Set some conjur config variables
      set $conjur_account 'sandbox';

      # Set up an internal location to proxy to the conjur authn service to authenticate 
      # tokens
      location = /conjur/authn {
        # Use google's dns to resolve our host
        resolver 8.8.8.8;

        # Only allow internal requests
        internal;

        # Set the conjur_login nginx var to a value passed in the request ctx
        set_by_lua $conjur_login 'return ngx.ctx.login or error("no login passed in ctx")';

        # Turn off passing request headers
        proxy_pass_request_headers off;

        # pass to conjur authn service
        proxy_pass 'https://authn-$conjur_account-conjur.herokuapp.com/users/$conjur_login/authenticate';
      }

      # This is the actual forwarding proxy. rewrite.lua sets the authorization header to 
      # a conjur authn token, possibly refreshing it in the proccess.
      location / { 
        # Use google's dns to resolve our host
        resolver 8.8.8.8;

        rewrite_by_lua_file '/home/vagrant/rewrite.lua';

        # We could verify that you're actually trying to connect to a conjur service here, but
        # I don't really see the point.
        proxy_pass https://$http_host$request_uri;

        # Only allow local connections here.
        allow 127.0.0.1;
        deny all;
      }
    }
}
