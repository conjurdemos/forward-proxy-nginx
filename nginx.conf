worker_processes  1;

error_log logs/error.log;
error_log logs/verbose.log debug;

pid        logs/nginx.pid;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;


    # Need a shared memory dictionary to store cached tokens.  256k
    # is probably overkill, but it's easier than figuring out exactly
    # how much space we need.
    lua_shared_dict conjur 256k;

    # So we can require the netrc library
    lua_package_path '/vagrant/conjur/?.lua';

    # Initialize to read the host credentials from a file
    init_by_lua '
      -- require conjur for general use
      require("conjur")
      -- load host credentials from netrc
      conjur.init_host_credentials()
    ';

    server {
      listen 8080;

      include '/vagrant/conjur/conjur-authn.conf';

      # This is the forwarding proxy. It sets the authorization header to 
      # a conjur authn token, possibly refreshing it in the proccess.
      location / { 
        # Use google's dns to resolve our host
        resolver 8.8.8.8;

        rewrite_by_lua 'conjur.authenticate_host()';

        # We could verify that you're actually trying to connect to a conjur service here, but
        # I don't really see the point.
        proxy_pass https://$http_host$request_uri;

        # Only allow local connections here.
        allow 127.0.0.1;
        deny all;
      }
    }
}
